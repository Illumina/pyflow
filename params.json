{"name":"Pyflow","tagline":"a lightweight parallel task engine","body":"\r\npyFlow is a tool to manage tasks in the context of a task dependency graph. It has some similarities to make. pyFlow is not a program – it is a python module, and workflows are defined using pyFlow by writing regular python code with the pyFlow API.\r\n\r\n### Use case: \r\npyFlow has been optimized to be lightweight and simple to use for prototype/RD workflows.\r\n\r\n### Features:\r\n* Define workflows as python code\r\n* Run workflows on localhost or sge\r\n* Continue workflows which have partially completed\r\n* Task resource management: Specify number of threads and memory\r\n* required for each task\r\n* Recursive workflow specification: take any existing pyFlow object and\r\n* use it as a task in another pyFlow.\r\n* Dynamic workflow specification: define a wait on task specification rather\r\n* than just tasks, so that tasks can be defined based on the results of \r\n* upstream tasks (note: recursive workflows are an even better way to do this)\r\n* Detects and reports all failed tasks with consistent workflow-level logging.\r\n* Task-level logging: All task stderr is logged and decorated,\r\n* eg. [time][host][workflow_run][taskid]\r\n* Task timing: Task wrapper function provides wall time for every task\r\n* Task priority: Tasks which are simultanously eligable to run can be assigned\r\n* relative priorities to be run or queued first.\r\n* Change environment variables or working directory for each task.\r\n* Email notification on job completion/error/exception\r\n* Provide ongoing task summary report at specified intervals\r\n* Specify additional external scheduler arguments (e.g. specify queue name to SGE)\r\n* Output task graph in dot format\r\n\r\n### Requirements:\r\npyflow's only requirement is python. pyflow is supported on python 2 versions 2.4+, except note that python 2.7.2 should not be used due to a critical multithread bug in the python interpreter which impacts many pyflow runs.\r\n\r\n### Getting Started\r\n\r\nTo use an existing pyflow workflow or develop a new one, you may need to download or generate the latest pyflow installation tarball (see top-level README.txt on git repository)\r\n\r\nTo develop a new pyflow workflow:\r\nStart by downloading the latest pyflow tarball (from version history section below).\r\nSee pyflow/README.txt\r\nLook at the demo programs. If new to pyflow the recommended order is:\r\n* helloWorld – simplest workflow\r\n* simpleDemo – a basic feature sandbox\r\n* subWorkflow – shows how recursive workflow invocation works\r\n* runOptionsDemo – shows an example of how workflow run options can be acquired from command-line arguments.\r\n* cwdDemo – a simple demonstration of how the 'cwd' option is used on task calls.\r\n* memoryDemo – a simple demonstration illustrating the effect of task memory requirement settings.\r\n* bclToBwaBam\r\nThis demo shows a workflow which takes a bcl basecalls directory, converts to fastq and aligns with BWA, consolidating each aligned sample into a single sample BAM.\r\n\r\nSee API documentation:\r\nOn the wiki: pyFlow API\r\nOr by executing: pyflow/docs/getApiDoc.py\r\nSee bagPipes methods for pyFlow usage on larger-scale workflows.\r\nNew status update feature\r\nA task summary report is logged every 60 minutes (configurable with updateInterval setting). An example update report is as follows:\r\n\r\n[StatusUpdate] ***** BWAWorkflow StatusUpdate *****\r\n[StatusUpdate] Workflow specification is complete?: False\r\n[StatusUpdate] Task status (waiting/queued/running/complete/error): 29/12/62/73/0\r\n[StatusUpdate] Longest ongoing queued task time (hrs): 0.0128\r\n[StatusUpdate] Longest ongoing queued task name: 'foo'\r\n[StatusUpdate] Longest ongoing running task time (hrs): 0.3167\r\n[StatusUpdate] Longest ongoing running task name: 'bar'\r\nExample recursive workflow task graph:\r\n\r\n[add]\r\n\r\n### Workflow developer API:\r\n\r\n[add]\r\n\r\n### Internal pyflow autodoc:","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}